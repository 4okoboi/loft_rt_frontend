import React, { useEffect, useState } from 'react'
import fifth_image from '../../../assets/images-webp/catalog/fifth_img.svg'
import first_image from '../../../assets/images-webp/catalog/first_img.svg'
import fourth_image from '../../../assets/images-webp/catalog/fourth_img.svg'
import second_image from '../../../assets/images-webp/catalog/second_img.svg'
import sixth_image from '../../../assets/images-webp/catalog/sixth_img.svg'
import third_image from '../../../assets/images-webp/catalog/third_img.svg'
import filtImg from '../../../assets/images/catalogs/filtImg.svg'
import { useTypedDispatch, useTypedSelector } from '../../../redux/redux-store'
import MyModal from '../../../UI/MyModal/MyModal'
import RangeSlider from '../../../UI/RangeSlider/RangeSlider'
import { ProductType } from '../../../utils/generalTypes'
import BasketPage from '../../BasketPage/BasketPage'
import classes from './AllProducts.module.css'
import Product from './Product/Product'

type AllProductsFormPropsType = {
	products: Array<ProductType>
	isShowPreloader: boolean
	getProducts: (
		counter: string,
		material: string,
		type: string,
		price_range: string,
		sort: string,
		search_query: string
	) => void
	getItem: (itemId: string) => void
	postAudit: (
		name: string,
		number: string,
		comment: string,
		items: string
	) => void
}

const filtersData: Array<string> = [
	'–ö—É—Ö–Ω–∏',
	'–®–∫–∞—Ñ—ã',
	'–°—Ç–æ–ª—ã',
	'–°—Ç–µ–ª–ª–∞–∂–∏',
	'–ö—É—Ö–æ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã',
	'–°–∫–∞–º–µ–π–∫–∏',
	'–ñ—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª—ã',
	'–¢—É–º–±—ã –ø–æ–¥ TV',
	'–ó–µ—Ä–∫–∞–ª–∞',
	'–°—Ç—É–ª—å—è',
	'–ö–æ–Ω—Å–æ–ª–∏',
	'–î–∏–≤–∞–Ω—ã',
	'–ö—Ä–æ–≤–∞—Ç–∏',
]

const categoriesData: Record<string, Array<string>> = {
	'–¢–æ—Ä–≥–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': [
		'–†–µ–π–ª—ã',
		'–í–µ—à–∞–ª–∞',
		'–°—Ç–µ–ª–ª–∞–∂–∏',
		'–†–µ—Å–µ–ø—à–µ–Ω—ã',
		'–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã',
		'–ü—Ä–∏–º–µ—Ä–æ—á–Ω—ã–µ',
		'–ó–µ—Ä–∫–∞–ª–∞',
		'–í–∏—Ç—Ä–∏–Ω—ã',
		'–ñ—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª—ã',
	],
	'–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å': [
		'–°—Ç–æ–ª—ã',
		'–°—Ç–æ–ª—ã –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–µ',
		'–°—Ç–æ–ª—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ',
		'–¢—É–º–±—ã',
		'–®–∫–∞—Ñ—ã',
		'–°—Ç–µ–ª–ª–∞–∂–∏',
		'–î–∏–≤–∞–Ω—ã',
		'–†–µ—Å–µ–ø—à–µ–Ω—ã',
		'–°—Ç—É–ª—å—è',
		'–ö—É—Ö–Ω–∏',
	],
	'–ö–∞—Ñ–µ, –±–∞—Ä—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã': ['–°—Ç–æ–ª—ã –¥–ª—è –∫–∞—Ñ–µ', '–î–∏–≤–∞–Ω—ã', '–°—Ç–µ–ª–ª–∞–∂–∏', '–°—Ç—É–ª—å—è'],
	'–ú–µ–±–µ–ª—å –¥–ª—è –¥–æ–º–∞': [
		'–ö—É—Ö–Ω–∏',
		'–®–∫–∞—Ñ—ã',
		'–°—Ç–æ–ª—ã',
		'–ö—É—Ö–æ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã',
		'–°—Ç–µ–ª–ª–∞–∂–∏',
		'–¢—É–º–±—ã –ø–æ–¥ –¢–í',
		'–ñ—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª—ã',
		'–°–∫–∞–º–µ–π–∫–∏',
		'–ó–µ—Ä–∫–∞–ª–∞',
		'–ö—Ä–æ–≤–∞—Ç–∏',
		'–î–∏–≤–∞–Ω—ã',
		'–ö–æ–Ω—Å–æ–ª–∏',
		'–°—Ç—É–ª—å—è',
	],
	'–ö—É—Ö–Ω–∏, —à–∫–∞—Ñ—ã –∫—É–ø–µ': [],
	'–î–ª—è –≥–æ—Å—Ç–∏–Ω–∏—Ü': [
		'–ö—É—Ö–Ω–∏',
		'–®–∫–∞—Ñ—ã',
		'–°—Ç–æ–ª—ã',
		'–ö—É—Ö–æ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã',
		'–°—Ç–µ–ª–ª–∞–∂–∏',
		'–¢—É–º–±—ã –ø–æ–¥ –¢–í',
		'–ñ—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª—ã',
		'–°–∫–∞–º–µ–π–∫–∏',
		'–ó–µ—Ä–∫–∞–ª–∞',
		'–ö—Ä–æ–≤–∞—Ç–∏',
		'–î–∏–≤–∞–Ω—ã',
		'–ö–æ–Ω—Å–æ–ª–∏',
		'–°—Ç—É–ª—å—è',
	],
}

const AllProducts: React.FC<AllProductsFormPropsType> = props => {
	console.log('=== AllProducts component rendered ===')

	const products = useTypedSelector(state => state.catalogPage.products)

	const dispatch = useTypedDispatch()

	const [shopModal, setShopModal] = useState(false)

	const [selected, setSelected] = useState('–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞')

	const [counter, setCounter] = useState(1)
	const [material, setMaterial] = useState('none')
	const [type, setType] = useState<Array<string>>([])
	const [price_range, setPrice_range] = useState('1499-45999')
	const [sort, setSort] = useState('default')
	const [search_query, setSearch_query] = useState<string>('')

	const [selectedCategory, setSelectedCategory] = useState<string | null>(null)

	const currentSubcategories = selectedCategory
		? categoriesData[selectedCategory]
		: []

	const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		setSelected(e.target.value)
		console.log('üéØ handleChange - selected:', e.target.value)
		switch (e.target.value) {
			case '–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞':
				console.log('üîÑ Setting material to: none')
				return setMaterial('none')
			case '–•–≤–æ—è':
				console.log('üîÑ Setting material to: –•–≤–æ—è')
				return setMaterial('–•–≤–æ—è')
			case '–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞':
				console.log('üîÑ Setting material to: –ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞')
				return setMaterial('–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞')
			case '–ë–µ—Ä—ë–∑–∞':
				console.log('üîÑ Setting material to: –ë–µ—Ä—ë–∑–∞')
				return setMaterial('–ë–µ—Ä—ë–∑–∞')
			case '–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞':
				console.log('üîÑ Setting material to: –õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞')
				return setMaterial('–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞')
			case '–î—É–±':
				console.log('üîÑ Setting material to: –î—É–±')
				return setMaterial('–î—É–±')
			case '–ö–µ–¥—Ä':
				console.log('üîÑ Setting material to: –ö–µ–¥—Ä')
				return setMaterial('–ö–µ–¥—Ä')
			default:
				console.log('üîÑ Setting material to: none (default)')
				return setMaterial('none')
		}
	}

	const handleSort = (event: React.ChangeEvent<HTMLSelectElement>) => {
		switch (event.target.value) {
			case '–ü–æ—Ä—è–¥–æ–∫: –ø–æ —É–º–æ–ª—á–∞':
				setSort('default')
				break
			case '–ü–æ—Ä—è–¥–æ–∫: —Ü–µ–Ω–∞ –≤–≤–µ—Ä—Ö':
				setSort('priceup')
				break
			case '–ü–æ—Ä—è–¥–æ–∫: —Ü–µ–Ω–∞ –≤–Ω–∏–∑':
				setSort('pricedown')
				break
			default:
				setSort('default')
				break
		}
	}

	const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {
		const label = event.target.name

		if (label === '–≤—Å–µ') {
			if (event.target.checked) {
				const allLabels = [
					'–≤–µ—à–∞–ª–æ',
					'–∂—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏',
					'–∫–æ–Ω—Å–æ–ª–∏',
					'–∫—É—Ö–Ω—è',
					'—Ä–µ–π–ª—ã',
					'—Ä–µ—Å–µ–ø—à–Ω',
					'—Å—Ç–µ–ª–∞–∂–∏',
					'—Å—Ç–æ–ª –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–π',
					'—Å—Ç–æ–ª —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è',
					'—Å—Ç–æ–ª—ã',
					'—Å—Ç—É–ª—å—è',
					'—Ç–æ—Ä–≥–æ–≤—ã–π –æ—Å—Ç—Ä–æ–≤–æ–∫',
					'—Ç—É–º–±—ã',
					'—à–∫–∞—Ñ—ã',
					'–ø—Ä–æ—á–µ–µ',
				]
				setType(allLabels)
			} else {
				setType([])
			}
		} else {
			setType(prevType => {
				if (event.target.checked) {
					return [...prevType, label]
				} else {
					return prevType.filter(item => item !== label)
				}
			})
		}
	}

	const handlePrice_range = (range0: number, range1: number) => {
		setPrice_range(String(range0) + '-' + String(range1))
	}

	const [basketItems, setBasketItems] = useState<Array<ProductType>>([])

	const addProduct = (product: ProductType, counter: number) => {
		const existingProduct = basketItems.find(item => item.id === product.id)

		if (existingProduct) {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
			const updatedItems = basketItems.map(item =>
				item.id === product.id
					? { ...item, quantity: (item.quantity || 0) + counter }
					: item
			)
			setBasketItems(updatedItems)
		} else {
			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
			setBasketItems([...basketItems, { ...product, quantity: counter }])
		}
	}

	const removeItemById = (idToRemove: number): void => {
		const updatedArray = basketItems.filter(item => item.id !== idToRemove)
		setBasketItems(updatedArray)
	}

	const [articles, setArticles] = useState<Array<string>>([])

	const addArticle = (article: string) => {
		setArticles([...articles, article])
	}

	const removeArticle = (stringToRemove: string) => {
		const updatedArray = articles.filter(item => item !== stringToRemove)
		return setArticles(updatedArray)
	}

	useEffect(() => {
		console.log('üîç useEffect triggered')
		console.log('üì¶ material:', material)
		console.log('üî¢ counter:', counter)
		props.getProducts(
			String(counter),
			material,
			type.join('_'),
			price_range,
			sort,
			search_query
		)
	}, [counter, material, type, price_range, sort, search_query])

	const [isMobile, setIsMobile] = useState(false)

	useEffect(() => {
		const handleResize = () => {
			setIsMobile(window.innerWidth < 1200)
		}

		handleResize()
		window.addEventListener('resize', handleResize)
		return () => window.removeEventListener('resize', handleResize)
	}, [])

	const [isMiniMobile, setIsMiniMobile] = useState(false)

	useEffect(() => {
		const handleResize = () => {
			setIsMiniMobile(window.innerWidth < 450)
		}

		handleResize()
		window.addEventListener('resize', handleResize)
		return () => window.removeEventListener('resize', handleResize)
	}, [])

	const handleFilterWord = (filter: string) => {
		return filter
			.toLowerCase()
			.split(' ')
			.map(word => word.charAt(0).toUpperCase() + word.slice(1))
			.join('_')
	}

	const displayName = (name: string) => {
		return name
			.toLowerCase()
			.split(' ')
			.map(word => word.charAt(0).toUpperCase() + word.slice(1))
			.join(' ')
	}

	return (
		<div className={classes.products}>
			<MyModal visible={shopModal} setVisible={setShopModal}>
				<BasketPage
					basketItems={basketItems}
					setBasketItems={setBasketItems}
					addProduct={addProduct}
					removeItemById={removeItemById}
				/>
			</MyModal>
			<div
				className={classes.leftFilterBlock}
				style={{ display: isMobile ? 'none' : 'block' }}
			>
				<div className={classes.allWoodSpecies}>
					<div>
						<input
							className={classes.customRadio}
							name='color'
							type='radio'
							id='–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞'
							value='–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞'
							checked={selected === '–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞'}
							onChange={handleChange}
						/>
						<label
							htmlFor='–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞'
							style={{
								opacity: selected === '–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞' ? 1 : 0.6,
								color: '#C9C9C9',
							}}
						>
							–í—Å–µ –ø–æ—Ä–æ–¥—ã –¥–µ—Ä–µ–≤–∞
						</label>
					</div>
					<div>
						<input
							className={classes.customRadio}
							name='color'
							type='radio'
							id='–•–≤–æ—è'
							value='–•–≤–æ—è'
							checked={selected === '–•–≤–æ—è'}
							onChange={handleChange}
						/>
						<label
							htmlFor='–•–≤–æ—è'
							style={{
								opacity: selected === '–•–≤–æ—è' ? 1 : 0.6,
								color: '#C9C9C9',
							}}
						>
							–•–≤–æ—è
						</label>
					</div>
					<div>
						<input
							className={classes.customRadio}
							name='color'
							type='radio'
							id='–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞'
							value='–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞'
							checked={selected === '–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞'}
							onChange={handleChange}
						/>
						<label
							htmlFor='–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞'
							style={{
								opacity: selected === '–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞' ? 1 : 0.6,
								color: '#C9C9C9',
							}}
						>
							–ê–Ω–≥–∞—Ä—Å–∫–∞—è —Å–æ—Å–Ω–∞
						</label>
					</div>
					<div>
						<input
							className={classes.customRadio}
							name='color'
							type='radio'
							id='–ë–µ—Ä—ë–∑–∞'
							value='–ë–µ—Ä—ë–∑–∞'
							checked={selected === '–ë–µ—Ä—ë–∑–∞'}
							onChange={handleChange}
						/>
						<label
							htmlFor='–ë–µ—Ä—ë–∑–∞'
							style={{
								opacity: selected === '–ë–µ—Ä—ë–∑–∞' ? 1 : 0.6,
								color: '#C9C9C9',
							}}
						>
							–ë–µ—Ä—ë–∑–∞
						</label>
					</div>
					<div>
						<input
							className={classes.customRadio}
							name='color'
							type='radio'
							id='–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞'
							value='–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞'
							checked={selected === '–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞'}
							onChange={handleChange}
						/>
						<label
							htmlFor='–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞'
							style={{
								opacity: selected === '–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞' ? 1 : 0.6,
								color: '#C9C9C9',
							}}
						>
							–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞
						</label>
					</div>
					<div>
						<input
							className={classes.customRadio}
							name='color'
							type='radio'
							id='–î—É–±'
							value='–î—É–±'
							checked={selected === '–î—É–±'}
							onChange={handleChange}
						/>
						<label
							htmlFor='–î—É–±'
							style={{
								opacity: selected === '–î—É–±' ? 1 : 0.6,
								color: '#C9C9C9',
							}}
						>
							–î—É–±
						</label>
					</div>
					<div>
						<input
							className={classes.customRadio}
							name='color'
							type='radio'
							id='–ö–µ–¥—Ä'
							value='–ö–µ–¥—Ä'
							checked={selected === '–ö–µ–¥—Ä'}
							onChange={handleChange}
						/>
						<label
							htmlFor='–ö–µ–¥—Ä'
							style={{
								opacity: selected === '–ö–µ–¥—Ä' ? 1 : 0.6,
								color: '#C9C9C9',
							}}
						>
							–ö–µ–¥—Ä
						</label>
					</div>
				</div>
				<div className={classes.rangeSlider}>
					<RangeSlider handlePrice_range={handlePrice_range} />
				</div>
				<div className={classes.checkTitle}>–¢–∏–ø —Ç–æ–≤–∞—Ä–∞:</div>
				<div className={classes.productsType}>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='–≤—Å–µ'
							name='–≤—Å–µ'
							onChange={handleCheckboxChange}
						/>
						<label htmlFor='–≤—Å–µ'>–í—Å–µ</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='–≤–µ—à–∞–ª–æ'
							name='–≤–µ—à–∞–ª–æ'
							onChange={handleCheckboxChange}
							checked={type.includes('–≤–µ—à–∞–ª–æ')}
						/>
						<label htmlFor='–≤–µ—à–∞–ª–æ'>–í–µ—à–∞–ª–æ</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='–∂—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏'
							name='–∂—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏'
							onChange={handleCheckboxChange}
							checked={type.includes('–∂—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏')}
						/>
						<label htmlFor='–∂—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏'>–ñ—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='–∫–æ–Ω—Å–æ–ª–∏'
							name='–∫–æ–Ω—Å–æ–ª–∏'
							onChange={handleCheckboxChange}
							checked={type.includes('–∫–æ–Ω—Å–æ–ª–∏')}
						/>
						<label htmlFor='–∫–æ–Ω—Å–æ–ª–∏'>–ö–æ–Ω—Å–æ–ª–∏</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='–∫—É—Ö–Ω—è'
							name='–∫—É—Ö–Ω—è'
							onChange={handleCheckboxChange}
							checked={type.includes('–∫—É—Ö–Ω—è')}
						/>
						<label htmlFor='–∫—É—Ö–Ω—è'>–ö—É—Ö–Ω—è</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='—Ä–µ–π–ª—ã'
							name='—Ä–µ–π–ª—ã'
							onChange={handleCheckboxChange}
							checked={type.includes('—Ä–µ–π–ª—ã')}
						/>
						<label htmlFor='—Ä–µ–π–ª—ã'>–†–µ–π–ª—ã</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='—Ä–µ—Å–µ–ø—à–Ω'
							name='—Ä–µ—Å–µ–ø—à–Ω'
							onChange={handleCheckboxChange}
							checked={type.includes('—Ä–µ—Å–µ–ø—à–Ω')}
						/>
						<label htmlFor='—Ä–µ—Å–µ–ø—à–Ω'>–†–µ—Å–µ–ø—à–Ω</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='—Å—Ç–æ–ª –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–π'
							name='—Å—Ç–æ–ª –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–π'
							onChange={handleCheckboxChange}
							checked={type.includes('—Å—Ç–æ–ª –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–π')}
						/>
						<label htmlFor='—Å—Ç–æ–ª –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–π'>–°—Ç–æ–ª –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–π</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='—Å—Ç–æ–ª —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è'
							name='—Å—Ç–æ–ª —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è'
							onChange={handleCheckboxChange}
							checked={type.includes('—Å—Ç–æ–ª —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è')}
						/>
						<label htmlFor='—Å—Ç–æ–ª —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è'>–°—Ç–æ–ª —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='—Å—Ç–æ–ª—ã'
							name='—Å—Ç–æ–ª—ã'
							onChange={handleCheckboxChange}
							checked={type.includes('—Å—Ç–æ–ª—ã')}
						/>
						<label htmlFor='—Å—Ç–æ–ª—ã'>–°—Ç–æ–ª—ã</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='—Å—Ç—É–ª—å—è'
							name='—Å—Ç—É–ª—å—è'
							onChange={handleCheckboxChange}
							checked={type.includes('—Å—Ç—É–ª—å—è')}
						/>
						<label htmlFor='—Å—Ç—É–ª—å—è'>–°—Ç—É–ª—å—è</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='—Ç–æ—Ä–≥–æ–≤—ã–π –æ—Å—Ç—Ä–æ–≤–æ–∫'
							name='—Ç–æ—Ä–≥–æ–≤—ã–π –æ—Å—Ç—Ä–æ–≤–æ–∫'
							onChange={handleCheckboxChange}
							checked={type.includes('—Ç–æ—Ä–≥–æ–≤—ã–π –æ—Å—Ç—Ä–æ–≤–æ–∫')}
						/>
						<label htmlFor='—Ç–æ—Ä–≥–æ–≤—ã–π –æ—Å—Ç—Ä–æ–≤–æ–∫'>–¢–æ—Ä–≥–æ–≤—ã–π –æ—Å—Ç—Ä–æ–≤–æ–∫</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='—Ç—É–º–±—ã'
							name='—Ç—É–º–±—ã'
							onChange={handleCheckboxChange}
							checked={type.includes('—Ç—É–º–±—ã')}
						/>
						<label htmlFor='—Ç—É–º–±—ã'>–¢—É–º–±—ã</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='—à–∫–∞—Ñ—ã'
							name='—à–∫–∞—Ñ—ã'
							onChange={handleCheckboxChange}
							checked={type.includes('—à–∫–∞—Ñ—ã')}
						/>
						<label htmlFor='—à–∫–∞—Ñ—ã'>–®–∫–∞—Ñ—ã</label>
					</div>
					<div>
						<input
							type='checkbox'
							className={classes.customCheckbox}
							id='–ø—Ä–æ—á–µ–µ'
							name='–ø—Ä–æ—á–µ–µ'
							onChange={handleCheckboxChange}
							checked={type.includes('–ø—Ä–æ—á–µ–µ')}
						/>
						<label htmlFor='–ø—Ä–æ—á–µ–µ'>–ü—Ä–æ—á–µ–µ</label>
					</div>
				</div>
			</div>
			<div className={classes.rightProductsBlock}>
				<div className={classes.searchAndSort}>
					<div className={classes.filtAlt} style={{ cursor: 'pointer' }}>
						<div>
							<img src={filtImg} />
						</div>
						<div style={{ fontFamily: 'NAMU-1960-otf', position: 'relative' }}>
							–§–∏–ª—å—Ç—Ä—ã
							<div className={classes.sortSelection}>
								<select className={classes.sortfield} onChange={handleSort}>
									<option>–ü–æ—Ä—è–¥–æ–∫: –ø–æ —É–º–æ–ª—á–∞</option>
									<option>–ü–æ—Ä—è–¥–æ–∫: —Ü–µ–Ω–∞ –≤–≤–µ—Ä—Ö</option>
									<option>–ü–æ—Ä—è–¥–æ–∫: —Ü–µ–Ω–∞ –≤–Ω–∏–∑</option>
								</select>
							</div>
						</div>
					</div>
					<div className={classes.divSearchfield}>
						<input
							placeholder={isMiniMobile ? '' : '–ü–æ–∏—Å–∫'}
							className={classes.searchfield}
							onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
								setSearch_query(event.target.value)
							}
						/>
					</div>
					<div className={classes.divSortfield}>
						<select className={classes.sortfield} onChange={handleSort}>
							<option>–ü–æ—Ä—è–¥–æ–∫: –ø–æ —É–º–æ–ª—á–∞</option>
							<option>–ü–æ—Ä—è–¥–æ–∫: —Ü–µ–Ω–∞ –≤–≤–µ—Ä—Ö</option>
							<option>–ü–æ—Ä—è–¥–æ–∫: —Ü–µ–Ω–∞ –≤–Ω–∏–∑</option>
						</select>
					</div>
				</div>
				<div className={classes.filtersWrapper}>
					<div className={classes.filtersWithImgWrapper}>
						<div className={classes.filtersWithImg}>
							<div
								className={
									selectedCategory === '–¢–æ—Ä–≥–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'
										? classes.filterWithImgWrapperActive
										: classes.filterWithImgWrapper
								}
								onClick={() => {
									setSelectedCategory('–¢–æ—Ä–≥–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ')
									setType([])
								}}
							>
								<div className={classes.labelWrapper}>
									<div className={classes.filterLabel}>
										–¢–æ—Ä–≥–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
									</div>
								</div>
								<div className={classes.imgWrapper}>
									<img src={first_image} className={classes.firstImg} />
								</div>
							</div>
							<div
								className={
									selectedCategory === '–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å'
										? classes.filterWithImgWrapperActive
										: classes.filterWithImgWrapper
								}
								onClick={() => {
									setSelectedCategory('–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å')
									setType([])
								}}
							>
								<div className={classes.labelWrapper}>
									<div className={classes.filterLabel}>–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å</div>
								</div>
								<div className={classes.imgWrapper}>
									<img src={second_image} className={classes.secondImg} />
								</div>
							</div>
							<div
								className={
									selectedCategory === '–ö–∞—Ñ–µ, –±–∞—Ä—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã'
										? classes.filterWithImgWrapperActive
										: classes.filterWithImgWrapper
								}
								onClick={() => {
									setSelectedCategory('–ö–∞—Ñ–µ, –±–∞—Ä—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã')
									setType([])
								}}
							>
								<div className={classes.labelWrapper}>
									<div className={classes.filterLabel}>
										–ö–∞—Ñ–µ<br></br>–ë–∞—Ä—ã<br></br>–†–µ—Å—Ç–æ—Ä–∞–Ω—ã
									</div>
								</div>
								<div className={classes.imgWrapper}>
									<img src={third_image} className={classes.thirdImg} />
								</div>
							</div>
							<div
								className={
									selectedCategory === '–ú–µ–±–µ–ª—å –¥–ª—è –¥–æ–º–∞'
										? classes.filterWithImgWrapperActive
										: classes.filterWithImgWrapper
								}
								onClick={() => {
									setSelectedCategory('–ú–µ–±–µ–ª—å –¥–ª—è –¥–æ–º–∞')
									setType([])
								}}
							>
								<div className={classes.labelWrapper}>
									<div className={classes.filterLabel}>–î–ª—è –¥–æ–º–∞</div>
								</div>
								<div className={classes.imgWrapper}>
									<img src={fourth_image} className={classes.fourthImg} />
								</div>
							</div>
							<div
								className={
									selectedCategory === '–ö—É—Ö–Ω–∏, —à–∫–∞—Ñ—ã –∫—É–ø–µ'
										? classes.filterWithImgWrapperActive
										: classes.filterWithImgWrapper
								}
								onClick={() => {
									setSelectedCategory('–ö—É—Ö–Ω–∏, —à–∫–∞—Ñ—ã –∫—É–ø–µ')
									setType([])
								}}
							>
								<div className={classes.labelWrapper}>
									<div className={classes.filterLabel}>
										–ö—É—Ö–Ω–∏<br></br>–®–∫–∞—Ñ—ã –∫—É–ø–µ
									</div>
								</div>
								<div className={classes.imgWrapper}>
									<img src={fifth_image} className={classes.fifthImg} />
								</div>
							</div>
							<div
								className={
									selectedCategory === '–î–ª—è –≥–æ—Å—Ç–∏–Ω–∏—Ü'
										? classes.filterWithImgWrapperActive
										: classes.filterWithImgWrapper
								}
								onClick={() => {
									setSelectedCategory('–î–ª—è –≥–æ—Å—Ç–∏–Ω–∏—Ü')
									setType([])
								}}
							>
								<div className={classes.labelWrapper}>
									<div className={classes.lastFilterLabel}>
										–î–ª—è<br></br>–≥–æ—Å—Ç–∏–Ω–∏—Ü
									</div>
								</div>
								<div className={classes.imgWrapper}>
									<img src={sixth_image} className={classes.sixthImg} />
								</div>
							</div>
						</div>
					</div>
					<div
						className={classes.allWoods}
						style={{ display: isMobile ? 'flex' : 'none' }}
					>
						<div className={classes.woodSpecialWrapper}>
							<input
								className={classes.customRadio}
								name='color'
								type='radio'
								id='–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞'
								value='–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞'
								checked={selected === '–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞'}
								onChange={handleChange}
							/>
							<label
								htmlFor='–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞'
								style={{
									opacity: selected === '–í—Å–µ_–ø–æ—Ä–æ–¥—ã_–¥–µ—Ä–µ–≤–∞' ? 1 : 0.3,
									color: '#C9C9C9',
								}}
							>
								–í—Å–µ –ø–æ—Ä–æ–¥—ã –¥–µ—Ä–µ–≤–∞
							</label>
						</div>
						<div className={classes.woodSpecialWrapper}>
							<input
								className={classes.customRadio}
								name='color'
								type='radio'
								id='–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞'
								value='–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞'
								checked={selected === '–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞'}
								onChange={handleChange}
							/>
							<label
								htmlFor='–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞'
								style={{
									opacity: selected === '–ê–Ω–≥–∞—Ä—Å–∫–∞—è_—Å–æ—Å–Ω–∞' ? 1 : 0.3,
									color: '#C9C9C9',
								}}
							>
								–ê–Ω–≥–∞—Ä—Å–∫–∞—è —Å–æ—Å–Ω–∞
							</label>
						</div>
						<div className={classes.woodSpecialWrapper}>
							<input
								className={classes.customRadio}
								name='color'
								type='radio'
								id='–•–≤–æ—è'
								value='–•–≤–æ—è'
								checked={selected === '–•–≤–æ—è'}
								onChange={handleChange}
							/>
							<label
								htmlFor='–•–≤–æ—è'
								style={{
									opacity: selected === '–•–≤–æ—è' ? 1 : 0.3,
									color: '#C9C9C9',
								}}
							>
								–•–≤–æ—è
							</label>
						</div>
						<div className={classes.woodSpecialWrapper}>
							<input
								className={classes.customRadio}
								name='color'
								type='radio'
								id='–ë–µ—Ä—ë–∑–∞'
								value='–ë–µ—Ä—ë–∑–∞'
								checked={selected === '–ë–µ—Ä—ë–∑–∞'}
								onChange={handleChange}
							/>
							<label
								htmlFor='–ë–µ—Ä—ë–∑–∞'
								style={{
									opacity: selected === '–ë–µ—Ä—ë–∑–∞' ? 1 : 0.3,
									color: '#C9C9C9',
								}}
							>
								–ë–µ—Ä—ë–∑–∞
							</label>
						</div>
						<div className={classes.woodSpecialWrapper}>
							<input
								className={classes.customRadio}
								name='color'
								type='radio'
								id='–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞'
								value='–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞'
								checked={selected === '–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞'}
								onChange={handleChange}
							/>
							<label
								htmlFor='–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞'
								style={{
									opacity: selected === '–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞' ? 1 : 0.3,
									color: '#C9C9C9',
								}}
							>
								–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞
							</label>
						</div>
						<div className={classes.woodSpecialWrapper}>
							<input
								className={classes.customRadio}
								name='color'
								type='radio'
								id='–î—É–±'
								value='–î—É–±'
								checked={selected === '–î—É–±'}
								onChange={handleChange}
							/>
							<label
								htmlFor='–î—É–±'
								style={{
									opacity: selected === '–î—É–±' ? 1 : 0.3,
									color: '#C9C9C9',
								}}
							>
								–î—É–±
							</label>
						</div>
						<div className={classes.woodSpecialWrapper}>
							<input
								className={classes.customRadio}
								name='color'
								type='radio'
								id='–ö–µ–¥—Ä'
								value='–ö–µ–¥—Ä'
								checked={selected === '–ö–µ–¥—Ä'}
								onChange={handleChange}
							/>
							<label
								htmlFor='–ö–µ–¥—Ä'
								style={{
									opacity: selected === '–ö–µ–¥—Ä' ? 1 : 0.3,
									color: '#C9C9C9',
								}}
							>
								–ö–µ–¥—Ä
							</label>
						</div>
					</div>
					<div className={classes.commonFiltersWrapper}>
						<div className={classes.commonFilters}>
							{currentSubcategories.map(name => (
								<div
									className={
										type.includes(handleFilterWord(name))
											? classes.commonFilterButtonHovered
											: classes.commonFilterButton
									}
								>
									{displayName(name)}
									<input
										type='checkbox'
										className={classes.filterCheckbox}
										id={handleFilterWord(name)}
										name={handleFilterWord(name)}
										onChange={handleCheckboxChange}
										checked={type.includes(handleFilterWord(name))}
									/>
								</div>
							))}
						</div>
					</div>
				</div>
				<div className={classes.productsList}>
					{props.isShowPreloader ? (
						<div
							style={{
								display: 'flex',
								justifyContent: 'center',
								alignItems: 'center',
								height: '200px',
								fontSize: '18px',
							}}
						>
							–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...
						</div>
					) : products.length === 0 ? (
						<div
							style={{
								display: 'flex',
								justifyContent: 'center',
								alignItems: 'center',
								height: '200px',
								fontSize: '18px',
								color: '#666',
							}}
						>
							–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
						</div>
					) : (
						products.map((product: any) => {
							return (
								<Product
									key={product.id}
									id={product.id}
									name={product.name}
									material={product.category || ''}
									description={product.description}
									price={product.price}
									setShopModal={setShopModal}
									product={product}
									addProduct={addProduct}
								/>
							)
						})
					)}
				</div>
				<div className={classes.allWoodSpecies}>
					<button
						className={classes.loadMore}
						onClick={() => {
							setCounter(counter + 1)
						}}
					>
						–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ
					</button>
				</div>
			</div>

			{/* <div className={classes.posts}>
                  <PostsFilter
                      onSetSearchQuery={props.onSetSearchQuery}
                      searchQuery={props.searchQuery}
                      selectedSort={props.selectedSort}
                      sortPosts={sortPosts}
                  />
                  {props.isShowPreloader
                      && <Preloader/>}
                  {
                      sortedAndSearchPosts.map((post: PostType | UserType, index: number) => {
                              const typedPost = post as PostType;
                              return (
                                  <Post
                                      number={index + 1}
                                      id={typedPost.id}
                                      name={typedPost.title}
                                      massage={typedPost.body}
                                      key={typedPost.id}
                                  />
                              );
                      })
                  }
                  <div ref={lastElement} style={{height: 20, background: "red"}}/>
                  {sortedAndSearchPosts.length === 0 && !props.isShowPreloader
                      && <h1 className={classes.headlines}>Posts not found!</h1>}
              </div> */}
		</div>
	)
}

export default AllProducts
