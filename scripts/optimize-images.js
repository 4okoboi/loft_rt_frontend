const sharp = require('sharp')
const fs = require('fs')
const path = require('path')

const inputDir = path.join(__dirname, '../src/assets/images')
const outputDir = path.join(__dirname, '../src/assets/images-webp')
const srcDir = path.join(__dirname, '../src')

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
if (!fs.existsSync(outputDir)) {
	fs.mkdirSync(outputDir, { recursive: true })
}

// –û–±—ä–µ–∫—Ç –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ä—ã—Ö –ø—É—Ç–µ–π –Ω–∞ –Ω–æ–≤—ã–µ
const imageMapping = {}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
async function processDirectory(dir, currentPath = '') {
	const entries = fs.readdirSync(path.join(inputDir, currentPath), {
		withFileTypes: true,
	})

	for (const entry of entries) {
		const fullPath = path.join(currentPath, entry.name)
		const inputPath = path.join(inputDir, fullPath)
		const outputPath = path.join(outputDir, currentPath)

		if (entry.isDirectory()) {
			// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
			if (!fs.existsSync(path.join(outputDir, fullPath))) {
				fs.mkdirSync(path.join(outputDir, fullPath), { recursive: true })
			}
			// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
			await processDirectory(dir, fullPath)
		} else if (entry.isFile() && /\.(jpg|jpeg|png)$/i.test(entry.name)) {
			await optimizeImage(inputPath, outputPath, entry.name, fullPath)
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function optimizeImage(inputPath, outputDir, fileName, relativePath) {
	try {
		const stats = fs.statSync(inputPath)
		const fileSizeKB = Math.round(stats.size / 1024)

		console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${fileName} (${fileSizeKB}KB)`)

		const baseName = path.parse(fileName).name
		const webpFileName = `${baseName}.webp`
		const webpPath = path.join(outputDir, webpFileName)

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ WebP
		await sharp(inputPath)
			.webp({
				quality: 80,
				effort: 4,
			})
			.toFile(webpPath)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∑–∞–º–µ–Ω—ã
		const oldImportPath = `../../assets/images/${relativePath}`
		const newImportPath = `../../assets/images-webp/${relativePath.replace(
			/\.(png|jpg|jpeg)$/i,
			'.webp'
		)}`
		imageMapping[oldImportPath] = newImportPath

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä WebP —Ñ–∞–π–ª–∞
		const webpStats = fs.statSync(webpPath)
		const savings = Math.round(
			((stats.size - webpStats.size) / stats.size) * 100
		)

		console.log(
			`‚úÖ ${fileName}: ${fileSizeKB}KB ‚Üí WebP: ${Math.round(
				webpStats.size / 1024
			)}KB (—Å–∂–∞—Ç–∏–µ ${savings}%)`
		)

		// –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
		try {
			fs.unlinkSync(inputPath)
			console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª: ${fileName}`)
		} catch (deleteError) {
			console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${fileName}: ${deleteError.message}`)
		}
	} catch (error) {
		console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fileName}:`, error.message)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö
async function replaceImports() {
	console.log('üîÑ –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')

	const findFiles = (dir, extensions = ['.tsx', '.jsx', '.ts', '.js']) => {
		let files = []
		const items = fs.readdirSync(dir, { withFileTypes: true })

		for (const item of items) {
			const fullPath = path.join(dir, item.name)
			if (item.isDirectory()) {
				files = files.concat(findFiles(fullPath, extensions))
			} else if (extensions.some(ext => item.name.endsWith(ext))) {
				files.push(fullPath)
			}
		}
		return files
	}

	const files = findFiles(srcDir)
	let totalReplacements = 0

	for (const file of files) {
		try {
			let content = fs.readFileSync(file, 'utf8')
			let modified = false

			// –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
			for (const [oldPath, newPath] of Object.entries(imageMapping)) {
				if (content.includes(oldPath)) {
					content = content.replace(
						new RegExp(oldPath.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'),
						newPath
					)
					modified = true
					totalReplacements++
				}
			}

			if (modified) {
				fs.writeFileSync(file, content, 'utf8')
				console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${path.relative(srcDir, file)}`)
			}
		} catch (error) {
			console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${file}:`, error.message)
		}
	}

	console.log(`üéâ –ó–∞–º–µ–Ω–µ–Ω–æ ${totalReplacements} –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`)
}

// –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
async function main() {
	console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')
	console.log(`–í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${inputDir}`)
	console.log(`–í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${outputDir}`)

	try {
		await processDirectory(inputDir)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
		const mappingFile = path.join(__dirname, 'image-mapping.json')
		fs.writeFileSync(mappingFile, JSON.stringify(imageMapping, null, 2))

		console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

		// –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
		await replaceImports()

		console.log(`üìù –§–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${mappingFile}`)
		console.log(
			'üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
		)
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error)
	}
}

main()
