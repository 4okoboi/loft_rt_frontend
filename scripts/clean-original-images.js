const fs = require('fs')
const path = require('path')

const inputDir = path.join(__dirname, '../src/assets/images')

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function removeOriginalImages(dir, currentPath = '') {
	const entries = fs.readdirSync(path.join(dir, currentPath), {
		withFileTypes: true,
	})

	let removedCount = 0
	let totalSize = 0

	for (const entry of entries) {
		const fullPath = path.join(currentPath, entry.name)
		const filePath = path.join(dir, fullPath)

		if (entry.isDirectory()) {
			// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
			const result = removeOriginalImages(dir, fullPath)
			removedCount += result.count
			totalSize += result.size
		} else if (entry.isFile() && /\.(jpg|jpeg|png)$/i.test(entry.name)) {
			try {
				const stats = fs.statSync(filePath)
				const sizeKB = Math.round(stats.size / 1024)

				fs.unlinkSync(filePath)
				console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω: ${entry.name} (${sizeKB}KB)`)

				removedCount++
				totalSize += stats.size
			} catch (error) {
				console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${entry.name}:`, error.message)
			}
		}
	}

	return { count: removedCount, size: totalSize }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
	console.log('üßπ –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ PNG/JPG —Ñ–∞–π–ª—ã...')
	console.log(`–ü–∞–ø–∫–∞: ${inputDir}`)

	try {
		const result = removeOriginalImages(inputDir)

		console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!`)
		console.log(`üìä –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.count}`)
		console.log(
			`üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: ${Math.round(result.size / 1024 / 1024)}MB`
		)

		if (result.count === 0) {
			console.log(
				'‚ÑπÔ∏è  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—É–∂–µ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)'
			)
		}
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error)
	}
}

main()
